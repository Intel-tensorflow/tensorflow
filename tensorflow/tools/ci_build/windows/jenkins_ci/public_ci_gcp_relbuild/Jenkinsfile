// The tf-rel-win pipeline

static final ArrayList buildLabels = [ 'winhrel' ]
static final String branchName = params.get('CHECKOUT_BRANCH', 'master')
static final String python_version = params.get('PYTHON_VERSION', 'all')
static final boolean upload_pypi = params.get('UPLOAD_PYPI', false)
static final boolean is_replace_pypi_project_description = params.get('IS_REPLACE_PYPI_PROJECT_DESCRIPTION', false)
static final String pypi_project_description = params.get('PYPI_PROJECT_DESCRIPTION', '')

def runBuild(pyVer) {
    catchError {
        withEnv(["WORKSPACE=$WORKSPACE","PYTHON_VERSION=${pyVer}","RELEASE_BUILD=1"]) {
            echo "----- Build TF Windows Wheels with Python Version ${pyVer} -----"
            bat'''
                echo Workspace is %WORKSPACE%
                cd %WORKSPACE%
                wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/bani/win_ci_scripts/tensorflow/tools/ci_build/windows/cpu/pip/ci_run_build_test.sh -O ci_run_build_test.sh
                wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/bani/win_ci_scripts/tensorflow/tools/ci_build/windows/cpu/pip/make_new_package_name.py -O make_new_package_name.py
                bash ./ci_run_build_test.sh --release_build --extra_test_flags "--test_env=TF2_BEHAVIOR=1" --project_name "tensorflow_cpu"
            '''
        }
    }

    dir("$WORKSPACE" + "/artifact") {
        archiveArtifacts artifacts: 'tensorflow_cpu*.whl, *.log', excludes: null
    }
}

def renameForPyPI(pyVer) {
    catchError {
        withEnv(["WORKSPACE=$WORKSPACE", "PYTHON_VERSION=${pyVer}"]) {
            echo "----- Next, renaming TF Windows Wheels to PyPI under tensorflow-intel namespace -----"
            
            echo "----- generate run_pypi_rename.bat -----"
            dir("$WORKSPACE" + "/artifact") {
                sh '''#!/bin/bash -x
                echo "echo This is run_pypi_rename.bat executing..." > ./run_pypi_rename.bat
                echo "pip install wheel twine" >> ./run_pypi_rename.bat
                echo "python %WORKSPACE%\\make_new_package_name.py tensorflow_cpu tensorflow_intel" >> ./run_pypi_rename.bat
                '''
                
                bat'''
                cd %WORKSPACE%\\artifact
                if not exist "%WORKSPACE%\\venv_py%PYTHON_VERSION%\\Scripts\\activate" exit /b 1
                %WORKSPACE%\\venv_py%PYTHON_VERSION%\\Scripts\\activate && %WORKSPACE%\\artifact\\run_pypi_rename.bat
                echo Package rename for PyPI completed.
                '''
            }

        }
    }
}

def sanityTests(pyVer){
    withEnv(["WORKSPACE=$WORKSPACE","PYTHON_VENV=$WORKSPACE\\venv_py${pyVer}"]){
        echo "----- Validate sanity tests in $PYTHON_VENV-----"
        bat '''
            cd %WORKSPACE%
            wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/win_ci/tensorflow/tools/ci_build/windows/jenkins_ci/validation/sanity_tests.py -O sanity_tests.py

            echo Check the python venv is exist
            if not exist "%PYTHON_VENV%\\Scripts\\python.exe" exit /b 1

            echo Install Tensorflow Wheel
            for /f %%w in ('dir %WORKSPACE%\\artifact\\*.whl /B') do "%PYTHON_VENV%\\Scripts\\pip.exe" install --force-reinstall "%WORKSPACE%\\artifact\\%%w"

            echo Run sanity test
            "%PYTHON_VENV%\\Scripts\\python.exe" sanity_tests.py
        '''
        echo "----- Validate sanity tests completed -----"
    }
}

def copyWheelToUploadArtifactsBak(){
    withEnv(["WORKSPACE=$WORKSPACE"]) {
        dir("$WORKSPACE") {
            bat'''
            if not exist "%WORKSPACE%\\artifacts_bak" mkdir %WORKSPACE%\\artifacts_bak
            copy %WORKSPACE%\\artifact\\*.whl %WORKSPACE%\\artifacts_bak
            '''
        }
    }
}

def buildWheel(pyVer){
    runBuild(pyVer)
    renameForPyPI(pyVer)
    sanityTests(pyVer)
    copyWheelToUploadArtifactsBak()
}

def uploadPyPI(pyVer) {
    catchError {
        withEnv(["WORKSPACE=$WORKSPACE", "PYTHON_VERSION=${pyVer}"]) {
            echo "----- Finally, uploading TF Windows Wheels to PyPI under tensorflow-intel namespace -----"
            
            echo "----- generate run_pypi_upload.bat -----"
            dir("$WORKSPACE" + "/artifacts_bak") {
                sh '''#!/bin/bash -x
                echo "echo This is run_pypi_upload.bat executing..." > ./run_pypi_upload.bat
                echo "pip install wheel twine" >> ./run_pypi_upload.bat
                echo "twine upload tensorflow_intel*.whl --non-interactive --disable-progress-bar --skip-existing" >> ./run_pypi_upload.bat
                '''
            }

            withCredentials([usernamePassword(credentialsId: 'PYPI_INTEL_SECRET', usernameVariable: 'TWINE_USERNAME', passwordVariable: 'TWINE_PASSWORD')]) {
                bat'''
                set TWINE_REPOSITORY_URL=https://upload.pypi.org/legacy/
                cd %WORKSPACE%\\artifacts_bak
                if not exist "%WORKSPACE%\\venv_py%PYTHON_VERSION%\\Scripts\\activate" exit /b 1

                %WORKSPACE%\\venv_py%PYTHON_VERSION%\\Scripts\\activate && %WORKSPACE%\\artifacts_bak\\run_pypi_upload.bat
                cd %WORKSPACE%
                rmdir /s /q %WORKSPACE%\\artifacts_bak
                echo Upload completed.
                '''
            }
        }
    }
}

def toBase64(text){
    //The built-in method encode to bas64 is disabled.
    map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    s64 = ""
    require_size = 3
    bucket = []
    padding = "=".bytes[0]
    text.each{c->
        bucket.add(c)
        
        if(bucket.size() == require_size){
            c0 = bucket[0].bytes[0]
            c1 = bucket[1].bytes[0]
            c2 = bucket[2].bytes[0]

            s64 += map[(c0 & 0xfc) >> 2]
            s64 += map[((c0 & 0x3) << 4) + ((c1 & 0xf0) >> 4)]
            s64 += map[((c1 & 0x0f) << 2) + ((c2 & 0xc0) >> 6)]
            s64 += map[c2 & 0x3f]

            bucket = [] //clear is disabled
        }
    }

    if(bucket.size() != 0){
        start_size = bucket.size()
        for(i = 0; i < bucket.size(); i ++){
            bucket[i] = bucket[i].bytes[0]
        }
        while(bucket.size() < require_size){
            bucket.add(0x0)
        }
        c0 = bucket[0]
        c1 = bucket[1]
        c2 = bucket[2]

        padding_size = (24 - start_size * 8)/6 as int
        s64 += map[(c0 & 0xfc) >> 2]
        s64 += map[((c0 & 0x3) << 4) + ((c1 & 0xf0) >> 4)]
        
        if(padding_size == 1){
            s64 += map[((c1 & 0x0f) << 2) + ((c2 & 0xc0) >> 6)]
            s64 += "="
        }
        else { // padding_size == 2
            s64 += "=="
        }
        bucket = []
    }

    return s64
}

def replace_pypi_project_description(description){
    String setup_path = "$WORKSPACE\\tensorflow\\tensorflow\\tools\\pip_package\\setup.py"

    base64Description = toBase64(description)

    echo "-------------Start replace ${setup_path}-------------"
    withEnv(["WORKSPACE=$WORKSPACE", "PYTHON_ENV=C:\\Python310", "SETUP_PATH=${setup_path}", "DESCRIPTION=${base64Description}"]){
        bat'''
        cd %WORKSPACE%
        echo Check the %SETUP_PATH% is exist
        if not exist "%SETUP_PATH%" exit /b 1
        wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/win_ci/tensorflow/tools/ci_build/windows/jenkins_ci/tools/replace_pypi_project_description.py -O replace_pypi_project_description.py

        echo Check the "%PYTHON_ENV%\\python.exe" is exist
        if not exist "%PYTHON_ENV%\\python.exe" exit /b 1

        echo ---- Current content
        cat "%SETUP_PATH%"
       "%PYTHON_ENV%\\python.exe" ./replace_pypi_project_description.py "%SETUP_PATH%" -d %DESCRIPTION%
        echo ---- Replaced to content
        cat "%SETUP_PATH%"
        '''
    }
    echo "-------------End replace-------------"
}

Map parallelBuild = [:]
buildLabels.each { l ->
    parallelBuild += [
        "${l}": {
            node(l) {
                stage('Checkout') {
                    if (fileExists('./tensorflow/.git/HEAD')) {
                        sh 'cd tensorflow && git checkout .'
                    }
                    checkout([$class: 'GitSCM',
                    branches: [[name: branchName]],
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class           : 'RelativeTargetDirectory',
                                  relativeTargetDir: 'tensorflow']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/tensorflow/tensorflow']]])
                } // stage Checkout
                
                dir("$WORKSPACE") {
                    bat'''
                    if exist "%WORKSPACE%\\artifact" rmdir /s /q %WORKSPACE%\\artifact
                    if exist "%WORKSPACE%\\artifacts_bak" rmdir /s /q %WORKSPACE%\\artifacts_bak
                    '''
                }

                if(is_replace_pypi_project_description){
                    stage('Replace project description'){
                        replace_pypi_project_description(pypi_project_description)
                    }
                }

                if(python_version == "all") {
                    // Build TensorFlow, create wheel with python3.7
                    stage('Build1') {
                        buildWheel("37")
                    } // stage Build1
                    
                    // Build TensorFlow, create wheel with python3.8
                    stage('Build2') {
                        buildWheel("38")
                    } // stage Build2
                    
                    // Build TensorFlow, create wheel with python3.9
                    stage('Build3') {
                        buildWheel("39")
                    } // stage Build3
                    
                    // Build TensorFlow, create wheel with python3.10
                    stage('Build4') {
                        buildWheel("310")
                    } // stage Build4
                } else {
                    // Build TensorFlow, create wheel with Py version passed as parameter
                    stage('BuildX') {
                        buildWheel(python_version)
                    } // stage Build1
                }

                if(upload_pypi) {
                    stage('Upload_PyPI') {
                        // Now upload the wheels to PyPI under tf_nightly_intel namespace
                        uploadPyPI("310")
                    }
                }
            }
        }
    ]
}
parallel parallelBuild