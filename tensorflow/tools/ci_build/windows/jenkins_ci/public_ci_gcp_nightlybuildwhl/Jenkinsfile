static final ArrayList buildLabels = [ 'winh' ]
static final String branchName = params.get('CHECKOUT_BRANCH', 'master')
static final String python_version = params.get('PYTHON_VERSION', '38')
static final String timeout_hours = params.get('TIMEOUT_HOURS', '10')
static final String wheel_limit_size = params.get('WHEEL_LIMIT_SIZE', '180')
static final String is_notify_failure = params.get('IS_NOTIFY_FAILURE', true)
static final String is_upload_whl = params.get('IS_UPLOAD_WHL', true)

def runBuild(pyVer) {
    catchError {
        withEnv(["WORKSPACE=$WORKSPACE","PYTHON_VERSION=${pyVer}","TF_NIGHTLY=1"]) {
            echo "----- Build TF Windows Wheels with Python Version ${pyVer} -----"
            bat'''
                echo Workspace is %WORKSPACE%
                cd %WORKSPACE%
                wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/mraunak/win_nightly_scripts/tensorflow/tools/ci_build/windows/cpu/pip/ci_run_build_test.sh -O ci_run_build_test.sh
                wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/bani/win_ci_scripts/tensorflow/tools/ci_build/windows/cpu/pip/make_new_package_name.py -O make_new_package_name.py
                bash ./ci_run_build_test.sh
            '''
        }
    }
    
    dir("$WORKSPACE" + "/artifact") {
        // archiveArtifacts artifacts: 'tensorflow*.whl, *.log', excludes: null
        archiveArtifacts artifacts: 'tf_nightly*.whl, *.log', excludes: null
    }
    
    dir("$WORKSPACE") {
        bat'''
        if not exist "%WORKSPACE%\\artifacts_bak" mkdir %WORKSPACE%\\artifacts_bak
        copy %WORKSPACE%\\artifact\\*.whl %WORKSPACE%\\artifacts_bak
        '''
    }
}

def validateWheelsSize(){
    catchError {
        withEnv(["WORKSPACE=$WORKSPACE", "PYTHON_VENV=$WORKSPACE\\venv_py310", "WHEEL_LIMIT_SIZE=${wheel_limit_size}"]){
            echo "----- Validate wheel size ----"
            bat '''
                cd %WORKSPACE%
                wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/win_ci/tensorflow/tools/ci_build/windows/jenkins_ci/validation/validate_wheel_size.py -O validate_wheel_size.py
    
                echo Check %PYTHON_VENV% is exist
                if not exist "%PYTHON_VENV%\\Scripts\\python.exe" exit /b 1
    
                echo Validating wheel size is under the limitation %WHEEL_LIMIT_SIZE%MB
                "%PYTHON_VENV%\\Scripts\\python.exe" %WORKSPACE%\\validate_wheel_size.py --limit %WHEEL_LIMIT_SIZE% %WORKSPACE%\\artifacts_bak
            '''
            echo "----- Validate wheel size completed -----"
        }
    }
}

def sanityTests(pyVer){
    catchError {
        withEnv(["WORKSPACE=$WORKSPACE","PYTHON_VENV=$WORKSPACE\\venv_py${pyVer}"]){
            echo "----- Validate sanity tests in $PYTHON_VENV-----"
            bat '''
                cd %WORKSPACE%
                wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/win_ci/tensorflow/tools/ci_build/windows/jenkins_ci/validation/sanity_tests.py -O sanity_tests.py
    
                echo Check the python venv is exist
                if not exist "%PYTHON_VENV%\\Scripts\\python.exe" exit /b 1
    
                echo Install Tensorflow Wheel
                for /f %%w in ('dir %WORKSPACE%\\artifact\\*.whl /B') do "%PYTHON_VENV%\\Scripts\\pip.exe" install "%WORKSPACE%\\artifact\\%%w"
    
                echo Run sanity test
                "%PYTHON_VENV%\\Scripts\\python.exe" sanity_tests.py
            '''
            echo "----- Validate sanity tests completed -----"
        }
    }
}

def sendmail(to, subject, content){
    withEnv(["WORKSPACE=$WORKSPACE", "TO=$to", "SUBJECT=$subject", "CONTENT=$content"]){
        bat '''
        if not exist "%WORKSPACE%\\venv_py310" C:\\Python310\\python.exe -m venv "%WORKSPACE%\\venv_py310"
        set PYTHON_VENV=%WORKSPACE%\\venv_py310
        wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/win_ci/tensorflow/tools/ci_build/windows/jenkins_ci/tools/sendmail.py -O sendmail.py
        "%PYTHON_VENV%\\Scripts\\pip.exe" install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib cryptography
        "%PYTHON_VENV%\\Scripts\\python.exe" sendmail.py -t "%TO%" -s "%SUBJECT%" -c "%CONTENT%" -k upBf3bddk_PJXW4QvOxF1BMN20n_l23msQ1NcUZmEwg=
        '''
    }  
}   

def uploadPyPI() {
    catchError {
        withEnv(["WORKSPACE=$WORKSPACE"]) {
            echo "----- Finally, uploading TF Windows Wheels to PyPI under tf_nightly_intel namespace -----"
            
            echo "----- generate run_pypi_upload.bat -----"
            dir("$WORKSPACE" + "/artifacts_bak") {
                sh '''#!/bin/bash -x
                echo "echo This is run_pypi_upload.bat executing..." > ./run_pypi_upload.bat
                echo "pip install wheel twine" >> ./run_pypi_upload.bat
                echo "python %WORKSPACE%\\make_new_package_name.py tf_nightly tf_nightly_intel" >> ./run_pypi_upload.bat
                echo "twine upload tf_nightly_intel*.whl --non-interactive --disable-progress-bar --skip-existing" >> ./run_pypi_upload.bat
                '''
            }

            withCredentials([usernamePassword(credentialsId: 'PYPI_INTEL_SECRET', usernameVariable: 'TWINE_USERNAME', passwordVariable: 'TWINE_PASSWORD')]) {
                bat'''
                set TWINE_REPOSITORY_URL=https://upload.pypi.org/legacy/
                cd %WORKSPACE%\\artifacts_bak
                if not exist "%WORKSPACE%\\venv_py310\\Scripts\\activate" exit /b 1

                %WORKSPACE%\\venv_py310\\Scripts\\activate && %WORKSPACE%\\artifacts_bak\\run_pypi_upload.bat
                cd %WORKSPACE%
                rmdir /s /q %WORKSPACE%\\artifacts_bak
                echo Upload completed.
                '''
            }
        }
    }
}

Map parallelBuild = [:]
buildLabels.each { l ->
    parallelBuild += [
        "${l}": {
            node(l) {
                timeout(unit: 'HOURS', time: timeout_hours) {
                    stage('Checkout') {
                        if (fileExists('./tensorflow/.git/HEAD')) {
                            sh 'cd tensorflow && git checkout .'
                        }
                        checkout([$class: 'GitSCM',
                        branches: [[name: branchName]],
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [[$class           : 'RelativeTargetDirectory',
                                      relativeTargetDir: 'tensorflow']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: 'https://github.com/tensorflow/tensorflow']]])
                    } // stage Checkout
                    
                    dir("$WORKSPACE") {
                        bat'''
                        if exist "%WORKSPACE%\\artifact" rmdir /s /q %WORKSPACE%\\artifact
                        if exist "%WORKSPACE%\\artifacts_bak" rmdir /s /q %WORKSPACE%\\artifacts_bak
                        '''
                    }
                    
                     // Build TensorFlow, create wheel with python3.8
                    stage('Build1') {
                        runBuild("38")
                        sanityTests("38")
                    } // stage Build1
                    
                 
                    // Build TensorFlow, create wheel with python3.9
                    stage('Build2') {
                        runBuild("39")
                        sanityTests("39")
                    } // stage Build2

                    // Build TensorFlow, create wheel with python3.10
                    stage('Build3') {
                        runBuild("310")
                        sanityTests("310")
                    } // stage Build3
                    
                     // Build TensorFlow, create wheel with python3.11
                    stage('Build4') {
                        runBuild("311")
                        sanityTests("311")
                    } // stage Build3

                    // stage('Validate'){
                    //     validateWheelsSize()
                    // }
                    
                    if (currentBuild.result == "FAILURE" && is_notify_failure) {
                        stage('Notify'){
                            sendmail('67c478aa.intel.onmicrosoft.com@amer.teams.ms;8238e57d.intel.onmicrosoft.com@amer.teams.ms', "$JOB_NAME - Build # $BUILD_NUMBER - Result: Failed", "Build URL: $BUILD_URL")   
                        }
                    }
                    else{
                        stage('Upload_PyPI') {
                            if(is_upload_whl){
                                // Now upload the wheels to PyPI under tf_nightly_intel namespace
                                uploadPyPI()   
                            }
                        }
                    }
                }
            }
        }
    ]
}
parallel parallelBuild