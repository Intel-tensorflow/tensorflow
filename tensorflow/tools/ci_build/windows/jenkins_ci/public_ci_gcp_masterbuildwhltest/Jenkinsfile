static final ArrayList buildLabels   = [ 'winh' ]
static final String branchName       = params.get('CHECKOUT_BRANCH', 'master')
static final String python_version   = params.get('PYTHON_VERSION', '38')
static final Boolean  isSetOneDNNEnv = params.get('IS_SET_ONEDNN_ENV', false)

String strTFGithubLabel = "Intel community CI build - Windows CPU"
String strCommitID = ""

def cleanup() {

    try {

        sh '''#!/bin/bash -x

        cd $WORKSPACE

        rm -rf *

        '''

    } catch(e) {

        echo "==============================================="

        echo "ERROR: Exception caught in cleanup()           "

        echo "ERROR: ${e}"

        echo "==============================================="



        echo ' '

        echo "Error while doing cleanup"

    }  // catch

}

def sendmail(to, subject, content){
    withEnv(["WORKSPACE=$WORKSPACE", "TO=$to", "SUBJECT=$subject", "CONTENT=$content"]){
        bat '''
        if not exist "%WORKSPACE%\\venv_py310" C:\\Python310\\python.exe -m venv "%WORKSPACE%\\venv_py310"
        set PYTHON_VENV=%WORKSPACE%\\venv_py310
        wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/win_ci/tensorflow/tools/ci_build/windows/jenkins_ci/tools/sendmail.py -O sendmail.py
        "%PYTHON_VENV%\\Scripts\\pip.exe" install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib cryptography
        "%PYTHON_VENV%\\Scripts\\python.exe" sendmail.py -t "%TO%" -s "%SUBJECT%" -c "%CONTENT%" -k upBf3bddk_PJXW4QvOxF1BMN20n_l23msQ1NcUZmEwg=
        '''
    }  
}

Map parallelBuild = [:]
buildLabels.each { l ->
    parallelBuild += [
        "${l}": {
            node(l) {
                stage('Cleanup') {
                    cleanup()
                }
                
                stage('Checkout') {
                    if (fileExists('./tensorflow/.git/HEAD')) {
                        sh 'cd tensorflow && git checkout .'
                    }
                    checkout([$class: 'GitSCM',
                    branches: [[name: branchName]],
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class           : 'RelativeTargetDirectory',
                                  relativeTargetDir: 'tensorflow']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/tensorflow/tensorflow']]])
                    
                    dir("tensorflow") {
                        strCommitID = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    }
                    echo "strCommitID=" + strCommitID
                } // stage Checkout
                
                // Build TensorFlow, create wheel, run unit tests
                stage('Build') {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        buildParams = ["WORKSPACE=$WORKSPACE","PYTHON_VERSION=$python_version"]

                        if(isSetOneDNNEnv){
                            buildParams.add("TF_ENABLE_ONEDNN_OPTS=1")
                        }

                        withEnv(buildParams) {
                        
                            echo "----- Build TF Windows Wheels & Unit Tests -----"
                            bat'''
                                echo Workspace is %WORKSPACE%
                                cd %WORKSPACE%
                                wget https://raw.githubusercontent.com/Intel-tensorflow/tensorflow/bani/win_ci_scripts/tensorflow/tools/ci_build/windows/cpu/pip/ci_run_build_test.sh -O ci_run_build_test.sh
                                set NUMBER_OF_PROCESSORS=64
                                bash ./ci_run_build_test.sh
                            '''
                        }
                    }

                } // stage Build
                
                stage('Archive') {
                    /* withEnv(["WORKSPACE=$WORKSPACE"]) {
                        bat '''
                            mkdir %WORKSPACE%\\artifact
                            del  %WORKSPACE%\\artifact\\*.*
                            rem xcopy /y %WORKSPACE%\\tensorflow\\py_test_dir\\tensorflow-*.whl %WORKSPACE%\\artifact
                            rem xcopy /y %WORKSPACE%\\tensorflow\\*.log %WORKSPACE%\\artifact
                            xcopy /y %WORKSPACE%\\*.log %WORKSPACE%\\artifact
                        '''
                    } */
                    dir("$WORKSPACE" + "/artifact") {
                        // archiveArtifacts artifacts: 'tensorflow*.whl, *.log', excludes: null
                        archiveArtifacts artifacts: ' *.log', excludes: null
                    }

                } // stage Archive
                
                if (currentBuild.result == "FAILURE") {
                    stage('Notify'){
                        sendmail('erxin.shang@intel.com;67c478aa.intel.onmicrosoft.com@amer.teams.ms;8238e57d.intel.onmicrosoft.com@amer.teams.ms', "$JOB_NAME - Build # $BUILD_NUMBER - Result: Failed", "Build URL: $BUILD_URL")   
                    }
                }
            }
        }
    ]
}

parallel parallelBuild

if (currentBuild.result == "FAILURE") {
    echo "Build status is FAILURE. Post status to github"
    githubNotify status: "FAILURE", credentialsId: "tensorflow-jenkins-new", account: "tensorflow", repo: "tensorflow", context: strTFGithubLabel, targetUrl: env.BUILD_URL, sha: strCommitID, description: "build failed"
}
else {
    echo "Build status is SUCCESS. Post status to github"
    githubNotify status: "SUCCESS", credentialsId: "tensorflow-jenkins-new", account: "tensorflow", repo: "tensorflow", context: strTFGithubLabel, targetUrl: env.BUILD_URL, sha: strCommitID, description: "build successful"
}
